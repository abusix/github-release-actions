{"version":3,"file":"perform-prerelease.js","sourceRoot":"/","sources":["perform-prerelease.ts"],"names":[],"mappings":";;;AACA,iDAA6C;AAEtC,KAAK,UAAU,iBAAiB,CACrC,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAmB,EAC7C,aAAqB;IAErB,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;IAErC,MAAM,aAAa,GAAG,MAAM,IAAA,0BAAW,EACrC,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,EAC5B,aAAa,CACd,CAAC;IACF,IAAI,CAAC,aAAa,EAAE,CAAC;QACnB,MAAM,IAAI,KAAK,CAAC,6BAA6B,aAAa,EAAE,CAAC,CAAC;IAChE,CAAC;IACD,IAAI,aAAa,CAAC,KAAK,EAAE,CAAC;QACxB,MAAM,IAAI,KAAK,CACb,mEAAmE,CACpE,CAAC;IACJ,CAAC;IAED,IAAI,aAAa,CAAC,UAAU,EAAE,CAAC;QAC7B,MAAM,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC;QAEhE,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC;YAC9D,KAAK;YACL,IAAI;SACL,CAAC,CAAC;QAEH,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,GAC1B,MAAM,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC;YAC5C,KAAK;YACL,IAAI;YACJ,QAAQ,EAAE,aAAa;YACvB,iBAAiB,EAAE,aAAa,CAAC,IAAI,CAAC,QAAQ;SAC/C,CAAC,CAAC;QAEL,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;YACpE,KAAK;YACL,IAAI;YACJ,QAAQ,EAAE,aAAa;YACvB,IAAI,EAAE,aAAa;YACnB,KAAK,EAAE,IAAI;YACX,IAAI,EAAE,YAAY,CAAC,IAAI;SACxB,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CACT,0BAA0B,YAAY,CAAC,EAAE,MAAM,YAAY,CAAC,QAAQ,EAAE,CACvE,CAAC;QAEF,OAAO;YACL,SAAS,EAAE,YAAY,CAAC,EAAE;YAC1B,iBAAiB,EAAE,KAAK;SACzB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,IAAI,CACT,kCAAkC,aAAa,CAAC,EAAE,6CAA6C,aAAa,CAAC,QAAQ,EAAE,CACxH,CAAC;IACF,OAAO;QACL,SAAS,EAAE,aAAa,CAAC,EAAE;QAC3B,iBAAiB,EAAE,IAAI;KACxB,CAAC;AACJ,CAAC;AA7DD,8CA6DC","sourcesContent":["import { ContextArgument } from \"./context\";\nimport { findRelease } from \"./find-release\";\n\nexport async function performPreRelease(\n  { octokit, context, logger }: ContextArgument,\n  targetTagName: string\n) {\n  const { owner, repo } = context.repo;\n\n  const targetRelease = await findRelease(\n    { octokit, context, logger },\n    targetTagName\n  );\n  if (!targetRelease) {\n    throw new Error(`No release found for tag: ${targetTagName}`);\n  }\n  if (targetRelease.draft) {\n    throw new Error(\n      `Target is a draft release, failing due to possible race condition`\n    );\n  }\n\n  if (targetRelease.prerelease) {\n    logger.info(`Target is a prerelease, creating a draft release`);\n\n    const latestRelease = await octokit.rest.repos.getLatestRelease({\n      owner,\n      repo,\n    });\n\n    const { data: releaseNotes } =\n      await octokit.rest.repos.generateReleaseNotes({\n        owner,\n        repo,\n        tag_name: targetTagName,\n        previous_tag_name: latestRelease.data.tag_name,\n      });\n\n    const { data: draftRelease } = await octokit.rest.repos.createRelease({\n      owner,\n      repo,\n      tag_name: targetTagName,\n      name: targetTagName,\n      draft: true,\n      body: releaseNotes.body,\n    });\n\n    logger.info(\n      `Created draft release (${draftRelease.id}): ${draftRelease.html_url}`\n    );\n\n    return {\n      releaseId: draftRelease.id,\n      isExistingRelease: false,\n    };\n  }\n\n  logger.info(\n    `Target is an existing release (${targetRelease.id}), proceeding with rollback/roll forward: ${targetRelease.html_url}`\n  );\n  return {\n    releaseId: targetRelease.id,\n    isExistingRelease: true,\n  };\n}\n"]}