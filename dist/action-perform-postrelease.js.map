{"version":3,"file":"action-perform-postrelease.js","sourceRoot":"/","sources":["action-perform-postrelease.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4CAA0C;AAC1C,wDAA0C;AAC1C,uCAA2D;AAC3D,+DAA2D;AAEpD,KAAK,UAAU,kBAAkB,CACtC,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAmB,EAC7C,eAAuB;IAEvB,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;IAErC,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;QAClE,KAAK;QACL,IAAI;QACJ,UAAU,EAAE,eAAe;KAC5B,CAAC,CAAC;IAEH,IAAI,aAAa,CAAC,KAAK,EAAE,CAAC;QACxB,mCAAmC;QACnC,MAAM,CAAC,IAAI,CAAC,6DAA6D,CAAC,CAAC;QAC3E,MAAM,EAAE,WAAW,EAAE,oBAAoB,EAAE,GAAG,MAAM,IAAA,wCAAkB,EACpE,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,EAC5B,aAAa,CAAC,QAAQ,CACvB,CAAC;QAGF,2BAA2B;QAC3B,MAAM,CAAC,IAAI,CACT,SAAS,WAAW,CAAC,MAAM,kCAAkC,oBAAoB,4BAA4B,CAC9G,CAAC;QACF,KAAK,MAAM,eAAe,IAAI,WAAW,EAAE,CAAC;YAC1C,MAAM,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;gBACrC,KAAK;gBACL,IAAI;gBACJ,UAAU,EAAE,eAAe,CAAC,EAAE;aAC/B,CAAC,CAAC;QACL,CAAC;QAED,sCAAsC;QACtC,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;QACrD,MAAM,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;YACrC,KAAK;YACL,IAAI;YACJ,UAAU,EAAE,eAAe;YAC3B,KAAK,EAAE,KAAK;YACZ,UAAU,EAAE,KAAK;YACjB,MAAM,EAAE,IAAI;SACb,CAAC,CAAC;IACL,CAAC;SAAM,CAAC;QACN,MAAM,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;QACxE,MAAM,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;YACrC,KAAK;YACL,IAAI;YACJ,UAAU,EAAE,eAAe;YAC3B,WAAW,EAAE,MAAM;SACpB,CAAC,CAAC;IACL,CAAC;AACH,CAAC;AApDD,gDAoDC;AAED,mBAAyB,SAAiB;IACxC,MAAM,OAAO,GAAG,IAAI,gBAAO,EAAE,CAAC;IAC9B,OAAO,kBAAkB,CAAC,IAAA,uBAAa,EAAC,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,EAAE,SAAS,CAAC,CAAC;AAC/E,CAAC;AAHD,4BAGC","sourcesContent":["import { Octokit } from \"@octokit/action\";\nimport * as github from \"@actions/github\";\nimport { ContextArgument, createContext } from \"./context\";\nimport { collectPrereleases } from \"./collect-prereleases\";\n\nexport async function performPostRelease(\n  { octokit, context, logger }: ContextArgument,\n  targetReleaseId: number\n) {\n  const { owner, repo } = context.repo;\n\n  const { data: targetRelease } = await octokit.rest.repos.getRelease({\n    owner,\n    repo,\n    release_id: targetReleaseId,\n  });\n\n  if (targetRelease.draft) {\n    // Find older prereleases to delete\n    logger.info(\"Target is a draft release, finding prereleases to bundle up\");\n    const { prereleases, skippedPreleaseCount } = await collectPrereleases(\n      { octokit, context, logger },\n      targetRelease.tag_name\n    );\n\n    \n    // Delete older prereleases\n    logger.info(\n      `Found ${prereleases.length} older prereleases to cleanup, ${skippedPreleaseCount} newer prereleases skipped`\n    );\n    for (const olderPrerelease of prereleases) {\n      await octokit.rest.repos.deleteRelease({\n        owner,\n        repo,\n        release_id: olderPrerelease.id,\n      });\n    }\n\n    // Promote draft release to production\n    logger.info(\"Promoting draft release to production\");\n    await octokit.rest.repos.updateRelease({\n      owner,\n      repo,\n      release_id: targetReleaseId,\n      draft: false,\n      prerelease: false,\n      latest: true,\n    });\n  } else {\n    logger.info(\"Target is an existing release, marking release as latest\");\n    await octokit.rest.repos.updateRelease({\n      owner,\n      repo,\n      release_id: targetReleaseId,\n      make_latest: \"true\",\n    });\n  }\n}\n\nexport default function (releaseId: number) {\n  const octokit = new Octokit();\n  return performPostRelease(createContext(octokit, github.context), releaseId);\n}\n"]}