{"version":3,"file":"context.js","sourceRoot":"/","sources":["context.ts"],"names":[],"mappings":";;;;;;AAEA,yDAAiC;AAqBjC;;;;;;GAMG;AACH,SAAgB,aAAa,CAC3B,OAAgB;AAChB;;;GAGG;AACH,aAAmD;IAEnD,OAAO;QACL,OAAO;QACP,OAAO,EAAE;YACP,IAAI,EAAE,aAAa,CAAC,IAAI;YACxB,GAAG,EAAE,aAAa,CAAC,GAAG;SACvB;QACD,MAAM,EAAE;YACN,KAAK,EAAE,cAAI,CAAC,KAAK;YACjB,IAAI,EAAE,cAAI,CAAC,IAAI;YACf,OAAO,EAAE,cAAI,CAAC,OAAO;YACrB,KAAK,EAAE,cAAI,CAAC,KAAK;SAClB;KACF,CAAC;AACJ,CAAC;AArBD,sCAqBC","sourcesContent":["import { context } from \"@actions/github\";\nimport { Octokit } from \"@octokit/action\";\nimport core from \"@actions/core\";\n\n/**\n * The context exists solely to faciliate testing by inversion of control.\n *\n * It is a simple object that contains everything the action needs to run.\n *\n * Tests will need to create and/or mock the context object manually, in all\n * other cases the createContext function should be used.\n */\nexport interface ContextArgument {\n  octokit: Octokit;\n  context: Pick<typeof context, \"repo\" | \"sha\">;\n  logger: {\n    debug: typeof core.debug;\n    info: typeof core.info;\n    warning: typeof core.warning;\n    error: typeof core.error;\n  };\n}\n\n/**\n * Create a context object containing everything each action needs to run.\n *\n * @param octokit The Octokit instance\n * @param githubContext The context object from the GitHub action\n * @returns Fully initialized context object\n */\nexport function createContext(\n  octokit: Octokit,\n  /*\n   * A partial is used here to make mocking easier.\n   * Additonal fields can be added as needed.\n   */\n  githubContext: Pick<typeof context, \"repo\" | \"sha\">\n) {\n  return {\n    octokit,\n    context: {\n      repo: githubContext.repo,\n      sha: githubContext.sha,\n    },\n    logger: {\n      debug: core.debug,\n      info: core.info,\n      warning: core.warning,\n      error: core.error,\n    },\n  };\n}\n"]}