{"version":3,"file":"collect-prereleases.js","sourceRoot":"/","sources":["collect-prereleases.ts"],"names":[],"mappings":";;;AAEA,MAAM,uBAAuB,GAAG,CAAC,CAAC;AAYlC;;;;;;;GAOG;AACI,KAAK,UAAU,kBAAkB,CACtC,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAmB,EAC7C,4BAAoC,EACpC,aAAa,GAAG,uBAAuB;IAEvC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;IAErC,sDAAsD;IACtD,MAAM,gBAAgB,GAAG,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAChD,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAC/B;QACE,KAAK;QACL,IAAI;KACL,CACF,CAAC;IACF,IAAI,cAAc,GAAiB,EAAE,CAAC;IACtC,IAAI,WAAW,GAAG,CAAC,CAAC;IACpB,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,gBAAgB,EAAE,CAAC;QAC3C,MAAM,CAAC,KAAK,CACV,mCAAmC,WAAW,kBAAkB,CACjE,CAAC;QACF,cAAc,GAAG,cAAc,CAAC,MAAM,CACpC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,CACnD,CAAC;QACF,IAAI,WAAW,GAAG,aAAa,EAAE,CAAC;YAChC,MAAM;QACR,CAAC;QACD,WAAW,EAAE,CAAC;IAChB,CAAC;IAED,iEAAiE;IACjE,MAAM,gBAAgB,GAAiB,EAAE,CAAC;IAC1C,MAAM,gBAAgB,GAAiB,EAAE,CAAC;IAC1C,KAAK,MAAM,UAAU,IAAI,cAAc,EAAE,CAAC;QACxC,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,0BAA0B,CAAC;YAC/D,KAAK;YACL,IAAI;YACJ,QAAQ,EAAE,GAAG,UAAU,CAAC,QAAQ,MAAM,4BAA4B,EAAE;SACrE,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CACV,aAAa,UAAU,CAAC,QAAQ,QAAQ,4BAA4B,eAAe,IAAI,CAAC,IAAI,CAAC,QAAQ,gBAAgB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAC3I,CAAC;QAEF,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC;YAC5B,MAAM,CAAC,KAAK,CACV,cAAc,UAAU,CAAC,QAAQ,qDAAqD,CACvF,CAAC;YACF,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACpC,CAAC;aAAM,CAAC;YACN,MAAM,CAAC,KAAK,CACV,cAAc,UAAU,CAAC,QAAQ,qDAAqD,CACvF,CAAC;YACF,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACpC,CAAC;IACH,CAAC;IACD,OAAO;QACL,gBAAgB;QAChB,gBAAgB;KACjB,CAAC;AACJ,CAAC;AA5DD,gDA4DC","sourcesContent":["import { ContextArgument } from \"./context\";\n\nconst DEFAULT_MAX_PAGE_SEARCH = 5;\n\n/**\n * Note the result of the GitHub API calls have many more fields.\n * This interface only contains those in use.\n */\ninterface Prerelease {\n  tag_name: string;\n  id: number;\n  body?: string | null;\n}\n\n/**\n * Collect all prereleases, splitting those newer and older than a given tag into two separate lists.\n * @param context Context argument\n * @param excludePrereleasesAheadOfTag Separate prereleases into those newer than this tag and those older than this tag in the results.\n *                                     A prerelease matching this tag exactly will be included in the olderReleases list.\n * @param maxPageSearch The maximum number of pages to look back through for prereleases. Default is 5.\n * @returns The list of prereleases and the number of newer prereleases found (and skipped).\n */\nexport async function collectPrereleases(\n  { octokit, context, logger }: ContextArgument,\n  excludePrereleasesAheadOfTag: string,\n  maxPageSearch = DEFAULT_MAX_PAGE_SEARCH\n) {\n  const { owner, repo } = context.repo;\n\n  // Collect all prereleases (within the max page limit)\n  const releasesIterator = octokit.paginate.iterator(\n    octokit.rest.repos.listReleases,\n    {\n      owner,\n      repo,\n    }\n  );\n  let allPrereleases: Prerelease[] = [];\n  let currentPage = 1;\n  for await (const value of releasesIterator) {\n    logger.debug(\n      `Searching through release page #${currentPage} for prereleases`\n    );\n    allPrereleases = allPrereleases.concat(\n      value.data.filter((release) => release.prerelease)\n    );\n    if (currentPage > maxPageSearch) {\n      break;\n    }\n    currentPage++;\n  }\n\n  // Split prereleases into older and newer than the target release\n  const newerPrereleases: Prerelease[] = [];\n  const olderPrereleases: Prerelease[] = [];\n  for (const prerelease of allPrereleases) {\n    const diff = await octokit.rest.repos.compareCommitsWithBasehead({\n      owner,\n      repo,\n      basehead: `${prerelease.tag_name}...${excludePrereleasesAheadOfTag}`,\n    });\n\n    logger.debug(\n      `Comparing ${prerelease.tag_name} and ${excludePrereleasesAheadOfTag}, ahead by: ${diff.data.ahead_by}, behind by: ${diff.data.behind_by}`\n    );\n\n    if (diff.data.behind_by > 0) {\n      logger.debug(\n        `Prerelease ${prerelease.tag_name} is newer than target release, adding to newer list`\n      );\n      newerPrereleases.push(prerelease);\n    } else {\n      logger.debug(\n        `Prerelease ${prerelease.tag_name} is older than target release, adding to older list`\n      );\n      olderPrereleases.push(prerelease);\n    }\n  }\n  return {\n    olderPrereleases,\n    newerPrereleases,\n  };\n}\n"]}