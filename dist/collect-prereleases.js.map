{"version":3,"file":"collect-prereleases.js","sourceRoot":"/","sources":["collect-prereleases.ts"],"names":[],"mappings":";;;AAEA,MAAM,uBAAuB,GAAG,CAAC,CAAC;AAElC;;;;;;GAMG;AACI,KAAK,UAAU,kBAAkB,CACtC,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAmB,EAC7C,YAAqB,EACrB,aAAa,GAAG,uBAAuB;IAEvC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;IAErC,sDAAsD;IACtD,MAAM,gBAAgB,GAAG,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAChD,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAC/B;QACE,KAAK;QACL,IAAI;KACL,CACF,CAAC;IACF,IAAI,WAAW,GACb,EAAE,CAAC;IACL,IAAI,WAAW,GAAG,CAAC,CAAC;IACpB,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,gBAAgB,EAAE,CAAC;QAC3C,MAAM,CAAC,KAAK,CACV,mCAAmC,WAAW,kBAAkB,CACjE,CAAC;QACF,WAAW,GAAG,WAAW,CAAC,MAAM,CAC9B,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,CACnD,CAAC;QACF,IAAI,WAAW,GAAG,aAAa,EAAE,CAAC;YAChC,MAAM;QACR,CAAC;QACD,WAAW,EAAE,CAAC;IAChB,CAAC;IAED,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;QAC/B,OAAO,EAAE,WAAW,EAAE,kBAAkB,EAAE,CAAC,EAAE,CAAC;IAChD,CAAC;IAED,gEAAgE;IAChE,IAAI,kBAAkB,GAAG,CAAC,CAAC;IAC3B,MAAM,cAAc,GAAG,EAAE,CAAC;IAC1B,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE,CAAC;QACrC,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,0BAA0B,CAAC;YAC/D,KAAK;YACL,IAAI;YACJ,QAAQ,EAAE,GAAG,UAAU,CAAC,QAAQ,MAAM,YAAY,EAAE;SACrD,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CACV,aAAa,UAAU,CAAC,QAAQ,QAAQ,YAAY,eAAe,IAAI,CAAC,IAAI,CAAC,QAAQ,gBAAgB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAC3H,CAAC;QAEF,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC;YAC5B,MAAM,CAAC,KAAK,CACV,cAAc,UAAU,CAAC,QAAQ,yCAAyC,CAC3E,CAAC;YACF,kBAAkB,EAAE,CAAC;YACrB,SAAS;QACX,CAAC;aAAM,CAAC;YACN,MAAM,CAAC,KAAK,CACV,cAAc,UAAU,CAAC,QAAQ,+CAA+C,CACjF,CAAC;YACF,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;IACD,OAAO;QACL,WAAW,EAAE,cAAc;QAC3B,oBAAoB,EAAE,kBAAkB;KACzC,CAAC;AACJ,CAAC;AAlED,gDAkEC","sourcesContent":["import { ContextArgument } from \"./context\";\n\nconst DEFAULT_MAX_PAGE_SEARCH = 5;\n\n/**\n * Collect all prereleases, optionally filtering out those newer than a given tag.\n * @param context Context argument\n * @param olderThanTag The tag to compare prereleases against.\n * @param maxPageSearch The maximum number of pages to look back through for prereleases. Default is 5.\n * @returns The list of prereleases and the number of newer prereleases found (and skipped).\n */\nexport async function collectPrereleases(\n  { octokit, context, logger }: ContextArgument,\n  olderThanTag?: string,\n  maxPageSearch = DEFAULT_MAX_PAGE_SEARCH\n) {\n  const { owner, repo } = context.repo;\n\n  // Collect all prereleases (within the max page limit)\n  const releasesIterator = octokit.paginate.iterator(\n    octokit.rest.repos.listReleases,\n    {\n      owner,\n      repo,\n    }\n  );\n  let prereleases: { tag_name: string; id: number; body?: string | null }[] =\n    [];\n  let currentPage = 1;\n  for await (const value of releasesIterator) {\n    logger.debug(\n      `Searching through release page #${currentPage} for prereleases`\n    );\n    prereleases = prereleases.concat(\n      value.data.filter((release) => release.prerelease)\n    );\n    if (currentPage > maxPageSearch) {\n      break;\n    }\n    currentPage++;\n  }\n\n  if (olderThanTag === undefined) {\n    return { prereleases, newerPreleaseCount: 0 };\n  }\n\n  // Determine which prereleases are older than the target release\n  let newerPreleaseCount = 0;\n  const olderPreleases = [];\n  for (const prerelease of prereleases) {\n    const diff = await octokit.rest.repos.compareCommitsWithBasehead({\n      owner,\n      repo,\n      basehead: `${prerelease.tag_name}...${olderThanTag}`,\n    });\n\n    logger.debug(\n      `Comparing ${prerelease.tag_name} and ${olderThanTag}, ahead by: ${diff.data.ahead_by}, behind by: ${diff.data.behind_by}`\n    );\n\n    if (diff.data.behind_by > 0) {\n      logger.debug(\n        `Prerelease ${prerelease.tag_name} is newer than target release, skipping`\n      );\n      newerPreleaseCount++;\n      continue;\n    } else {\n      logger.debug(\n        `Prerelease ${prerelease.tag_name} is older than target release, adding to list`\n      );\n      olderPreleases.push(prerelease);\n    }\n  }\n  return {\n    prereleases: olderPreleases,\n    skippedPreleaseCount: newerPreleaseCount,\n  };\n}\n"]}