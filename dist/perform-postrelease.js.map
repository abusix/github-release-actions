{"version":3,"file":"perform-postrelease.js","sourceRoot":"/","sources":["perform-postrelease.ts"],"names":[],"mappings":"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","sourcesContent":["import { ContextArgument } from \"./context\";\nimport { collectPrereleases } from \"./collect-prereleases\";\n\nexport async function performPostRelease(\n  { octokit, context, logger }: ContextArgument,\n  targetReleaseId: number\n) {\n  const { owner, repo } = context.repo;\n\n  logger.info(`Fetching target release (${targetReleaseId})`);\n  const { data: targetRelease } = await octokit.rest.repos.getRelease({\n    owner,\n    repo,\n    release_id: targetReleaseId,\n  });\n\n  if (targetRelease.draft) {\n    // Find all prereleases that will be included in the target release\n    logger.info(\"Target is a draft release, finding prereleases to bundle up\");\n    const { olderPrereleases, newerPrereleases } = await collectPrereleases(\n      { octokit, context, logger },\n      targetRelease.tag_name\n    );\n\n    // Delete all these prereleases\n    logger.info(\n      `Found ${olderPrereleases.length} older prereleases to cleanup, ${newerPrereleases.length} newer prereleases to update release notes for.`\n    );\n    for (const prerelease of olderPrereleases) {\n      logger.debug(\n        `Deleting prerelease ${prerelease.tag_name} (${prerelease.id})`\n      );\n      await octokit.rest.repos.deleteRelease({\n        owner,\n        repo,\n        release_id: prerelease.id,\n      });\n\n      // Exclude deleting the tag for the prerelease that has the same tag as the target release.\n      if (prerelease.tag_name !== targetRelease.tag_name) {\n        logger.debug(`Deleting tag ${prerelease.tag_name}`);\n        await octokit.rest.git.deleteRef({\n          owner,\n          repo,\n          ref: `tags/${prerelease.tag_name}`,\n        });\n      } else {\n        logger.debug(`Skipping tag ${prerelease.tag_name}`);\n      }\n    }\n\n    // Promote draft release to production\n    const updatedRelease = await octokit.rest.repos.updateRelease({\n      owner,\n      repo,\n      release_id: targetReleaseId,\n      draft: false,\n      prerelease: false,\n      latest: true,\n    });\n    logger.info(\n      `Draft release promoted to latest: ${updatedRelease.data.html_url}`\n    );\n\n    // Regenerate release notes for all newer prereleases\n    for (const prerelease of newerPrereleases) {\n      logger.debug(`Regenerating release notes for ${prerelease.tag_name}`);\n      const { data: releaseNotes } =\n        await octokit.rest.repos.generateReleaseNotes({\n          owner,\n          repo,\n          tag_name: prerelease.tag_name,\n          previous_tag_name: updatedRelease.data.tag_name,\n        });\n      await octokit.rest.repos.updateRelease({\n        owner,\n        repo,\n        release_id: prerelease.id,\n        body: releaseNotes.body,\n      });\n    }\n\n    return {\n      releaseUrl: updatedRelease.data.html_url,\n    };\n  } else {\n    logger.info(\"Target is an existing release, marking release as latest\");\n    const updatedRelease = await octokit.rest.repos.updateRelease({\n      owner,\n      repo,\n      release_id: targetReleaseId,\n      make_latest: \"true\",\n    });\n    return {\n      releaseUrl: updatedRelease.data.html_url,\n    };\n  }\n}\n"]}